<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 2022.01.25 윤상현 -->

<mapper namespace="mapper.adminOrder">

	<!-- 주문정보와 상품정보를 담기 위한 ResultMap -->
	<resultMap id="orderResult" type="java.util.Map">
	
		<result property="order_id" column="order_id" />
		<result property="user_id" column="user_id" />
		<result property="product_id" column="product_id" />
		<result property="order_amount" column="order_amount" />
		<result property="order_date" column="order_date" />
		<result property="order_state" column="order_state" />
		<result property="product_main_title" column="product_main_title" />
		<result property="product_price" column="product_price" />
		<result property="product_discount" column="product_discount" />

	</resultMap>

	<!-- 반품요청정보와 상품정보를 담기 위한 ResultMap -->
	<resultMap id="refundResult" type="java.util.Map">
	
		<result property="order_id" column="order_id" />
		<result property="user_id" column="user_id" />
		<result property="product_id" column="product_id" />
		<result property="order_amount" column="order_amount" />
		<result property="order_date" column="order_date" />
		<result property="order_state" column="order_state" />
		<result property="product_main_title" column="product_main_title" />
		<result property="product_price" column="product_price" />
		<result property="product_discount" column="product_discount" />
		<result property="notice_cre_date" column="notice_cre_date" />
		<result property="notice_type" column="notice_type" />
		<result property="user_membership" column="user_membership" />
		
	</resultMap>

	<!-- 옵션에 따른 주문 정보 조회 쿼리 -->
	<select id="selectOrderToOption" resultMap="orderResult" parameterType="java.util.Map">
	
		<if test="search_option == null or search_option.equals('')">
			select o.order_id, o.user_id, o.product_id, o.order_amount, o.order_date, o.order_state, p.product_price, p.product_discount, p.product_main_title from orders as o inner join product as p on o.product_id = p.product_id order by o.order_date desc
		</if>
		
		<if test="search_option != null and !search_option.equals('')">
			select o.order_id, o.user_id, o.product_id, o.order_amount, o.order_date, o.order_state, p.product_price, p.product_discount, p.product_main_title from orders as o inner join product as p on o.product_id = p.product_id where
			
			<if test='search_option == "orderDate"'>
					o.order_date between #{begin} and date_add(#{end}, interval 1 day) order by o.order_date desc
			</if>
	
			<if test='search_option == "userId"'>
					o.user_id = #{search_value} order by o.order_date desc
			</if>
			
			<if test='search_option == "productId"'>
					p.product_main_title like concat('%', #{search_value}, '%') order by o.order_date desc
			</if>		
	
			<if test='search_option == "state"'>
					o.order_state = #{search_value} order by o.order_date desc
			</if>
					
		</if>	

	</select>
	
	<!-- 주문 상태 변경 쿼리 -->
	<update id="updateState" parameterType="java.util.Map">

		update orders set 
		order_state=1,
		order_delivery_id = #{order_delivery_id}
		where	 
		order_id=#{order_id}

	</update>
	
	<!-- 반품/교환 상태 변경 쿼리 줬던 포인트 회수, 구매건수 및 구매액 회수 -->
	<update id="updateReturnState" parameterType="java.util.Map">

	<if test='option == "accept"'>
		update orders as o, user as u set 
			o.order_state = -3,
			u.user_total_amount = u.user_total_amount - #{amount},
			u.user_total_count = u.user_total_count - #{count},
			u.user_point = u.user_point - #{point},
			u.user_total_point = u.user_total_point - #{point}
		where	 
			o.order_id = #{order_id}
			and u.user_id = #{user_id}	
	</if>
	
	<if test='option == "negative"'>
		update orders set 
			order_state = 2
		where	 
			order_id = #{order_id}
	</if>

	</update>


	<!-- 옵션에 따른 주문 정보 조회 쿼리 -->
	<select id="selectRefundToOption" resultMap="refundResult" parameterType="java.util.Map">
	
		<if test="search_option == null or search_option.equals('')">
			select u.user_membership, o.order_id, o.user_id, o.product_id, o.order_amount, o.order_state, p.product_price, p.product_discount, p.product_main_title, n.notice_cre_date, n.notice_type from orders as o inner join product as p on o.product_id = p.product_id inner join notice as n on o.order_id = n.order_id inner join user as u on o.user_id = u.user_id where o.order_state = -2 order by n.notice_cre_date desc
		</if>
		
		<if test="search_option != null and !search_option.equals('')">
			select o.order_id, o.user_id, o.product_id, o.order_amount, o.order_state, p.product_price, p.product_discount, p.product_main_title, n.notice_cre_date, n.notice_type from orders as o inner join product as p on o.product_id = p.product_id inner join notice as n on o.order_id = n.order_id where o.order_state = -2 and
			
			<if test='search_option == "orderDate"'>
					n.notice_cre_date between #{begin} and date_add(#{end}, interval 1 day) order by n.notice_cre_date desc
			</if>
	
			<if test='search_option == "userId"'>
					o.user_id = #{search_value} order by n.notice_cre_date desc
			</if>
			
			<if test='search_option == "productId"'>
					o.order_id = #{search_value} order by n.notice_cre_date desc
			</if>		

					
		</if>	

	</select>
	
		<!-- 주문 상세 쿼리 -->
	<select id="returnDetail" resultType="java.util.Map" parameterType="String">
		select 
			o.order_id, 
			n.notice_id, n.notice_type, n.notice_body, n.notice_title,
			i.image_file
		from orders as o inner join notice as n on o.order_id = n.order_id 
			inner join image as i on n.notice_id = i.image_match_id
		where
			n.order_id like concat(#{order_id}, '_', '%')
			and i.image_category = 'refund'

	</select>
	
</mapper>